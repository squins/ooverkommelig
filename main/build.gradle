import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.node-gradle.node'
    id 'maven-publish'
    id 'org.jetbrains.dokka'
    id 'org.jetbrains.kotlin.multiplatform'
    id 'signing'
}

archivesBaseName = 'ooverkommelig'

repositories {
    mavenCentral()
}

configurations {
    javadoc
}

kotlin {
    js {
        browser {
            testTask {
                useKarma {
                    usePhantomJS()
                }
            }
        }
        nodejs()

        compilations.main.kotlinOptions {
            moduleKind = 'umd'
            sourceMap = true
            sourceMapEmbedSources = 'always'
        }
        compilations.test.kotlinOptions {
            moduleKind = 'umd'
        }
    }
    jvm()

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-annotations-common')
                implementation kotlin('test-common')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }

        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation libraries.junit
            }
        }
    }
}

task populateNodeModules(type: Copy) {
    from(kotlin.targets.js.compilations.main.output.allOutputs)

    def jsTestRuntimeClasspathConfiguration = configurations.jsTestRuntimeClasspath
    from(files {
        jsTestRuntimeClasspathConfiguration.collect { File file ->
            file.name.endsWith('.jar') ?
                    zipTree(file.absolutePath).matching {
                        include '*.js'
                        include '*.js.map'
                    } : files()
        }
    }.builtBy(jsTestRuntimeClasspathConfiguration))

    into "${buildDir}/node_modules"
}

node {
    version = nodeVersion
    download = true
}

task installQunit(type: NpmTask) {
    inputs.property('qunitVersion', qunitVersion)
    outputs.dir file('node_modules/qunit')
    
    args = ['install', "qunit@${qunitVersion}"]
}

task runQunit(type: NodeTask, dependsOn: [compileTestKotlinJs, populateNodeModules, installQunit]) {
    script = file('node_modules/qunit/bin/qunit.js')
    args = [projectDir.toPath().relativize(file(compileTestKotlinJs.outputFile).toPath()).toString()]
}

jsTest.dependsOn runQunit

task copyJsTestRuntimeLibrariesToQunitReportDir {
    def outputDirectoryPath = "${buildDir}/reports/tests/qunit/lib"
    inputs.files configurations.jsTestRuntimeClasspath
    outputs.dir file(outputDirectoryPath)

    doLast {
        configurations.jsTestRuntimeClasspath.each { File file ->
            if (file.name.endsWith('.jar')) {
                copy {
                    includeEmptyDirs = false

                    from zipTree(file.absolutePath)
                    into outputDirectoryPath
                    include { fileTreeElement ->
                        def path = fileTreeElement.path
                        path.endsWith('.js') && !path.endsWith('-meta.js')
                    }
                }
            }
        }
    }
}

task copyTestHtmlToQunitReportDir(type: Copy) {
    from file('src/jsTest/html')
    into "${buildDir}/reports/tests/qunit/html"
    filter(ReplaceTokens, tokens: [qunitVersion: qunitVersion])
}

jsTest.dependsOn copyJsTestRuntimeLibrariesToQunitReportDir, copyTestHtmlToQunitReportDir

task javadocJar(type: Jar) {
    from(dokkaHtml)
    baseName("$archivesBaseName-$project.name-javadoc")
}

def javadocJarArtifact = artifacts.add('javadoc', javadocJar) {
    classifier = "javadoc"
}

// Put your GPG and Sonatype credentials in "gradle.properties".
//
// Documentation for GPG:
//     https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials
if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile') && project.hasProperty('sonatype.username') && project.hasProperty('sonatype.password')) {
    publishing {
        publications {
            kotlinMultiplatform(MavenPublication) {
                artifactId archivesBaseName
            }

            js {
                artifactId "$archivesBaseName-$name"
            }

            jvm {
                artifactId "$archivesBaseName-$name"
                artifact javadocJarArtifact
            }

            metadata {
                artifactId "$archivesBaseName-$name"
            }

            all {
                pom {
                    name = "OOverkommelig"
                    description = "Manageable dependency injection for Kotlin."
                    url = "https://ooverkommelig.org/"
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://mit-license.org/'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:squins/ooverkommelig.git'
                        developerConnection = 'scm:git:scm:git:git@github.com:squins/ooverkommelig.git'
                        url = 'scm:git:git@github.com:squins/ooverkommelig.git'
                    }
                    developers {
                        developer {
                            id = "jstuyts"
                            name = "Johan Stuyts"
                            email = "j.stuyts@javathinker.com"
                        }
                        developer {
                            id = "keesvandieren"
                            name = "Kees van Dieren"
                            email = "keesvandieren@squins.com"
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "ossSonatype"
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = project.property("sonatype.username")
                    password = project.property("sonatype.password")
                }
            }
        }
    }

    signing {
        sign publishing.publications
    }
}
